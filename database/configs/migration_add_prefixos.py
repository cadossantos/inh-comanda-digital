#!/usr/bin/env python3
"""
Migra√ß√£o: Adicionar prefixos nas UHs baseado na categoria
Vers√£o: 0.6.0
Data: 2025-10-21

Prefixos:
- R- : Residence
- H- : Hotel
- D- : Day Use
- F- : Funcion√°rios
"""

import sqlite3
import shutil
from datetime import datetime

DB_NAME = "database/pousada.db"

def fazer_backup():
    """Cria backup do banco antes da migra√ß√£o"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"pousada_backup_{timestamp}.db"
    shutil.copy2(DB_NAME, backup_name)
    print(f"‚úÖ Backup criado: {backup_name}")
    return backup_name

def main():
    print("=" * 60)
    print("MIGRA√á√ÉO: Adicionar Prefixos nas UHs")
    print("=" * 60)

    # Fazer backup
    backup_file = fazer_backup()

    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        # Mapear categorias para prefixos
        prefixos = {
            'residence': 'R-',
            'hotel': 'H-',
            'day_use': 'D-',
            'funcionarios': 'F-'
        }

        print("\nüìù Adicionando prefixos nas UHs...\n")

        total_atualizadas = 0

        for categoria, prefixo in prefixos.items():
            # Buscar UHs da categoria que ainda n√£o tem prefixo
            cursor.execute("""
                SELECT id, numero
                FROM quartos
                WHERE categoria = ? AND numero NOT LIKE ?
            """, (categoria, f"{prefixo}%"))

            uhs = cursor.fetchall()

            if uhs:
                print(f"Categoria: {categoria.upper()} (Prefixo: {prefixo})")

                for uh_id, numero_atual in uhs:
                    novo_numero = f"{prefixo}{numero_atual}"

                    # Atualizar n√∫mero
                    cursor.execute("""
                        UPDATE quartos
                        SET numero = ?
                        WHERE id = ?
                    """, (novo_numero, uh_id))

                    print(f"   {numero_atual:10s} ‚Üí {novo_numero}")
                    total_atualizadas += 1

                print()

        conn.commit()

        # Verificar resultado
        print("=" * 60)
        print("RESUMO:")
        print("=" * 60)
        print(f"   ‚úÖ UHs atualizadas: {total_atualizadas}")

        # Estat√≠sticas finais
        print("\nüìä UHs por categoria:\n")
        cursor.execute("""
            SELECT categoria, COUNT(*) as total
            FROM quartos
            GROUP BY categoria
            ORDER BY categoria
        """)

        categoria_map = {
            'residence': 'üîµ Residence (R-)',
            'hotel': 'üü¢ Hotel (H-)',
            'day_use': 'üü° Day Use (D-)',
            'funcionarios': 'üü† Funcion√°rios (F-)'
        }

        for categoria, total in cursor.fetchall():
            nome = categoria_map.get(categoria, categoria)
            print(f"   {nome}: {total} UHs")

        # Exemplos de UHs
        print("\nüìã Exemplos de UHs com prefixos:\n")
        for categoria in ['residence', 'hotel', 'day_use', 'funcionarios']:
            cursor.execute("""
                SELECT numero
                FROM quartos
                WHERE categoria = ?
                ORDER BY numero
                LIMIT 3
            """, (categoria,))

            exemplos = [row[0] for row in cursor.fetchall()]
            if exemplos:
                categoria_nome = categoria_map.get(categoria, categoria)
                print(f"   {categoria_nome}: {', '.join(exemplos)}...")

        print(f"\nüíæ Backup preservado em: {backup_file}")
        print("\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!")

        conn.close()

    except Exception as e:
        print(f"\n‚ùå ERRO durante migra√ß√£o: {e}")
        print(f"   Restaure o backup se necess√°rio: cp {backup_file} {DB_NAME}")
        raise

if __name__ == "__main__":
    main()
